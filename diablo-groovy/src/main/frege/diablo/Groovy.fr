module diablo.Groovy where --

import Java.Util (Map, HashMap)
import Java.Net (URL, URLArray, URLClassLoader)

import diablo.Util as DUtil
import diablo.Diablo (TemplateEngine, Model)

{--
    A `GroovyWritable` is a type of object capable of write its content in a
    `Writer` object.
-}
data GroovyWritable = mutable native groovy.lang.Writable where
  native writeTo :: GroovyWritable -> Writer -> IO Writer throws IOException

{--
    A GroovyTemplate uses a predefined template and some data model and produces
    a `GroovyWritable`.
-}
data GroovyTemplate = mutable native groovy.text.Template where
  native make :: GroovyTemplate -> MutableIO (Map String String) -> IO GroovyWritable
               | GroovyTemplate -> IO GroovyWritable
{--
    The Groovy `MarkupTemplateEngine` produces templates for building
    xml documents.
-}
data GroovyEngine = mutable native groovy.text.markup.MarkupTemplateEngine where
  native new            :: ()                     -> IO GroovyEngine
  native createTemplate :: GroovyEngine -> Reader -> IO GroovyTemplate throws ClassNotFoundException, IOException
                         | GroovyEngine -> URL    -> IO GroovyTemplate throws ClassNotFoundException, IOException
{--
  Groovy implementation of `diablo.Diablo.TemplateEngine`
-}
instance TemplateEngine GroovyEngine where
  renderFromString :: GroovyEngine -> String -> Model -> IO String
  renderFromString engine st model = do
    reader   <- StringReader.buffered st
    template <- GroovyEngine.createTemplate engine reader
    render template model

  renderFromReader :: GroovyEngine -> Reader -> Model -> IO String
  renderFromReader engine reader model = do
    template <- GroovyEngine.createTemplate engine reader
    render template model

  renderFromPath :: GroovyEngine -> String -> Model -> IO String
  renderFromPath engine path model = do
    mburl    <- DUtil.getURL path
    template <- case mburl of
      Just    url -> do
        engine   <- GroovyEngine.new ()
        GroovyEngine.createTemplate engine url
      Nothing     -> fail ("template not found")
    render template model

{--
  It renders the result of mixin a GroovyTemplate and
  a set of bindings
-}
render :: GroovyTemplate -> Model -> IO String
render template model = do
    config   <- HashMap.fromList model
    writable <- GroovyTemplate.make template config
    stWriter <- StringWriter.new ()
    writer   <- writable.writeTo stWriter
    writer.toString
