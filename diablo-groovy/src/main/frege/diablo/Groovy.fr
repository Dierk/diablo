module diablo.Groovy where --

import diablo.Util (HashMap, StringReader)
import diablo.Diablo (Template, Model)

data GroovyWritable = mutable native groovy.lang.Writable where
  native writeTo :: GroovyWritable -> Writer -> IO Writer
      throws IOException

data GroovyTemplate = mutable native groovy.text.Template where
  native make :: GroovyTemplate -> HashMap -> IO GroovyWritable

data GroovyEngine = mutable native groovy.text.markup.MarkupTemplateEngine where
  native new            :: ()           -> IO GroovyEngine
  native createTemplate :: GroovyEngine -> BufferedReader -> IO GroovyTemplate
      throws ClassNotFoundException, IOException

instance Template GroovyTemplate where
   process template model = do
     config   <- HashMap.new ()
     writable <- GroovyTemplate.make template config
     stWriter <- StringWriter.new ()
     writer   <- writable.writeTo stWriter
     writer.toString


create :: BufferedReader -> IO GroovyTemplate
create reader = do
  engine   <- GroovyEngine.new ()
  GroovyEngine.createTemplate engine reader

createFromString :: String -> IO GroovyTemplate
createFromString tpl = do
  engine <- GroovyEngine.new ()
  reader <- StringReader.buffered tpl
  GroovyEngine.createTemplate engine reader
